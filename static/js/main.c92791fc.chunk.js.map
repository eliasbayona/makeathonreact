{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","PaperComponent","props","cancel","Paper","useStyles","makeStyles","theme","card","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","App","classes","React","useState","toggleLocalizedMode","toggleSateliteMode","toggleAnalyticsMode","open","setOpen","changeFiles","latitude","longitude","width","zoom","viewport","setViewport","mapboxApiAccessToken","mapStyle","onViewportChange","Fragment","CssBaseline","Container","className","Card","style","CardHeader","subheader","IconButton","iconButton","aria-label","InputBase","input","placeholder","inputProps","type","CardContent","Typography","variant","color","component","Fab","onClick","size","margin","Dialog","fullWidth","onClose","aria-labelledby","DialogTitle","cursor","id","DialogContent","DialogContentText","onChange","bind","this","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c92791fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport LayersOutlinedIcon from '@material-ui/icons/LayersOutlined';\nimport AirplanemodeActiveOutlinedIcon from '@material-ui/icons/AirplanemodeActiveOutlined';\nimport BubbleChartOutlinedIcon from '@material-ui/icons/BubbleChartOutlined';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Paper from '@material-ui/core/Paper';\nimport Draggable from 'react-draggable';\nimport {DropzoneArea} from 'material-ui-dropzone'\nimport ReactMapGl from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport logo from './logo.svg';\nimport './css/css.css';\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\n\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n  const [localized, toggleLocalizedMode] = React.useState(false)\n  const [satelite, toggleSateliteMode] = React.useState(true)\n  const [analytics, toggleAnalyticsMode] = React.useState(false)\n  const [open, setOpen] = React.useState(false);\n  const [files, changeFiles] = React.useState([]);\n  const [viewport, setViewport] = React.useState({\n    latitude:-24.6600,\n    longitude:25.9031,\n    width:'100vw',\n    height:'100vh',\n    zoom:12\n  })\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n const handleToggleLocalizedMode = () => {\n    toggleLocalizedMode(true);\n    toggleAnalyticsMode(false)\n    toggleSateliteMode(false)\n };\n\n const handleToggleAnalyticsMode = () => {\n  toggleLocalizedMode(false);\n  toggleAnalyticsMode(true)\n  toggleSateliteMode(false)\n }\n\n const handleToggleSateliteMode = () => {\n  toggleLocalizedMode(false);\n  toggleAnalyticsMode(false)\n  toggleSateliteMode(true)\n }\n  return (\n    <ReactMapGl {...viewport} \n     mapboxApiAccessToken=\"pk.eyJ1IjoidWJjaWN0IiwiYSI6ImNrMzhpMWk5MjA5NTQzbnJ0bnpybHo0ZHkifQ.QoKHB9zLuz-vFjMUHIkNig\"\n     mapStyle=\"mapbox://styles/ubcict/ck38kuqw301l11cpkjwy3d1jo\"\n     onViewportChange={ viewport => {\n       setViewport(viewport);\n     }}\n     >\n      <React.Fragment>\n          <CssBaseline />\n          \n          <Container maxWidth=\"xl\" className=\"map\">\n            <Card className={classes.card} style={{'position':'absolute','marginTop':'2rem', 'background': '#171616de'}}> \n            <CardHeader style={{'textAlign':'center'}}\n          \n                subheader=\"Meta Data\"\n            />\n            \n              <IconButton className={classes.iconButton} aria-label=\"menu\">\n        \n              </IconButton>\n              <InputBase\n                className={classes.input}\n                placeholder=\"Search for location\"\n                inputProps={{ 'aria-label': 'search for location' }}\n              />\n              <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n                <SearchIcon />\n              </IconButton>\n\n              <CardContent>\n                <Typography className=\"lcolor\" variant=\"body2\" color=\"white\" component=\"p\">\n                  Location:\n                </Typography>\n                <Typography className=\"data_color\"  variant=\"body2\" color=\"white\" component=\"p\">\n                  Gaborone\n                </Typography>\n                <Typography className=\"lcolor\" variant=\"body2\" color=\"white\" component=\"p\">\n                  Focus Area:\n                </Typography>\n                <Typography className=\"data_color\"  variant=\"body2\" color=\"white\" component=\"p\">\n                -24.6600 N\n                </Typography>\n                <Typography className=\"data_color\"  variant=\"body2\" color=\"white\" component=\"p\">\n                25.9031 W\n                </Typography>\n                <Typography className=\"lcolor\" variant=\"body2\" color=\"white\" component=\"p\">\n                  Date & Time:\n                </Typography>\n                <Typography className=\"data_color\" variant=\"body2\" color=\"white\" component=\"p\">\n                21 NOV 2019 \n                </Typography>\n              </CardContent>\n            </Card>\n            <div style={{'position':'absolute', 'top':'4rem', 'right':'2rem', 'display': 'inline-grid'}}>\n              <Fab onClick={() => toggleSateliteMode()}  style={{'margin':'.5rem'}} size=\"small\" color=\"secondary\" aria-label=\"add\" className={classes.margin}>\n                  <LayersOutlinedIcon />\n              </Fab>\n              <Fab onClick={handleClickOpen} style={{'margin':'.5rem'}} size=\"small\" color=\"secondary\" aria-label=\"add\" className={classes.margin}>\n                  <AirplanemodeActiveOutlinedIcon />\n              </Fab>\n              <Fab onClick={() => handleToggleAnalyticsMode()} style={{'margin':'.5rem'}} size=\"small\" color=\"secondary\" aria-label=\"add\" className={classes.margin}>\n                  <BubbleChartOutlinedIcon />\n              </Fab>\n            </div>\n            <Dialog\n            maxWidth =\"md\"\n            fullWidth={true}\n            open={open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"draggable-dialog-title\"\n          >\n            <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n              Use localized data\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                To subscribe to this website, please enter your email address here. We will send updates\n                occasionally.\n              </DialogContentText>\n              <DropzoneArea \n                onChange={changeFiles.bind(this)}\n              />\n            </DialogContent>\n            \n          </Dialog>\n            \n          </Container>\n        </React.Fragment>\n    </ReactMapGl>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}